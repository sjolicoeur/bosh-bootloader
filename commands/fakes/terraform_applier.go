// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-bootloader/storage"
)

type TerraformApplier struct {
	ValidateVersionStub        func() error
	validateVersionMutex       sync.RWMutex
	validateVersionArgsForCall []struct{}
	validateVersionReturns     struct {
		result1 error
	}
	validateVersionReturnsOnCall map[int]struct {
		result1 error
	}
	GetOutputsStub        func(storage.State) (map[string]interface{}, error)
	getOutputsMutex       sync.RWMutex
	getOutputsArgsForCall []struct {
		arg1 storage.State
	}
	getOutputsReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	getOutputsReturnsOnCall map[int]struct {
		result1 map[string]interface{}
		result2 error
	}
	ApplyStub        func(storage.State) (storage.State, error)
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 storage.State
	}
	applyReturns struct {
		result1 storage.State
		result2 error
	}
	applyReturnsOnCall map[int]struct {
		result1 storage.State
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TerraformApplier) ValidateVersion() error {
	fake.validateVersionMutex.Lock()
	ret, specificReturn := fake.validateVersionReturnsOnCall[len(fake.validateVersionArgsForCall)]
	fake.validateVersionArgsForCall = append(fake.validateVersionArgsForCall, struct{}{})
	fake.recordInvocation("ValidateVersion", []interface{}{})
	fake.validateVersionMutex.Unlock()
	if fake.ValidateVersionStub != nil {
		return fake.ValidateVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.validateVersionReturns.result1
}

func (fake *TerraformApplier) ValidateVersionCallCount() int {
	fake.validateVersionMutex.RLock()
	defer fake.validateVersionMutex.RUnlock()
	return len(fake.validateVersionArgsForCall)
}

func (fake *TerraformApplier) ValidateVersionReturns(result1 error) {
	fake.ValidateVersionStub = nil
	fake.validateVersionReturns = struct {
		result1 error
	}{result1}
}

func (fake *TerraformApplier) ValidateVersionReturnsOnCall(i int, result1 error) {
	fake.ValidateVersionStub = nil
	if fake.validateVersionReturnsOnCall == nil {
		fake.validateVersionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateVersionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TerraformApplier) GetOutputs(arg1 storage.State) (map[string]interface{}, error) {
	fake.getOutputsMutex.Lock()
	ret, specificReturn := fake.getOutputsReturnsOnCall[len(fake.getOutputsArgsForCall)]
	fake.getOutputsArgsForCall = append(fake.getOutputsArgsForCall, struct {
		arg1 storage.State
	}{arg1})
	fake.recordInvocation("GetOutputs", []interface{}{arg1})
	fake.getOutputsMutex.Unlock()
	if fake.GetOutputsStub != nil {
		return fake.GetOutputsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getOutputsReturns.result1, fake.getOutputsReturns.result2
}

func (fake *TerraformApplier) GetOutputsCallCount() int {
	fake.getOutputsMutex.RLock()
	defer fake.getOutputsMutex.RUnlock()
	return len(fake.getOutputsArgsForCall)
}

func (fake *TerraformApplier) GetOutputsArgsForCall(i int) storage.State {
	fake.getOutputsMutex.RLock()
	defer fake.getOutputsMutex.RUnlock()
	return fake.getOutputsArgsForCall[i].arg1
}

func (fake *TerraformApplier) GetOutputsReturns(result1 map[string]interface{}, result2 error) {
	fake.GetOutputsStub = nil
	fake.getOutputsReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *TerraformApplier) GetOutputsReturnsOnCall(i int, result1 map[string]interface{}, result2 error) {
	fake.GetOutputsStub = nil
	if fake.getOutputsReturnsOnCall == nil {
		fake.getOutputsReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
			result2 error
		})
	}
	fake.getOutputsReturnsOnCall[i] = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *TerraformApplier) Apply(arg1 storage.State) (storage.State, error) {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 storage.State
	}{arg1})
	fake.recordInvocation("Apply", []interface{}{arg1})
	fake.applyMutex.Unlock()
	if fake.ApplyStub != nil {
		return fake.ApplyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.applyReturns.result1, fake.applyReturns.result2
}

func (fake *TerraformApplier) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *TerraformApplier) ApplyArgsForCall(i int) storage.State {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return fake.applyArgsForCall[i].arg1
}

func (fake *TerraformApplier) ApplyReturns(result1 storage.State, result2 error) {
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 storage.State
		result2 error
	}{result1, result2}
}

func (fake *TerraformApplier) ApplyReturnsOnCall(i int, result1 storage.State, result2 error) {
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 storage.State
			result2 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 storage.State
		result2 error
	}{result1, result2}
}

func (fake *TerraformApplier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validateVersionMutex.RLock()
	defer fake.validateVersionMutex.RUnlock()
	fake.getOutputsMutex.RLock()
	defer fake.getOutputsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return fake.invocations
}

func (fake *TerraformApplier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
